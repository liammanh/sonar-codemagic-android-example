plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "org.sonarqube" version "3.5.0.2730"
    id 'jacoco'
}

/*Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())*/

sonarqube {
    properties {
        property "sonar.projectKey", "liammanh_sonar-codemagic-android-example"
        property "sonar.organization", "liammanh"
        property "sonar.host.url", "https://sonarcloud.io"

        property("sonar.projectName", "${project.name}")
        property "sonar.projectVersion", "${project.version}"
        property("sonar.projectDescription", "${project.description}")

        property 'sonar.core.codeCoveragePlugin', 'jacoco'
        property "sonar.coverage.jacoco.xmlReportPaths", "**/jacocoTestReport/jacocoTestReport.xml"
    }
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.gogox.sonar_codemagic_example"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"
        description ""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jacoco.includeNoLocationClasses = true
            jacoco.excludes = ['jdk.internal.*']
            useJUnitPlatform()
            finalizedBy jacocoTestReport
            // Show test results.
            testLogging {
                events "passed", "skipped", "failed"
            }
        }

    }
}
jacoco {
    toolVersion = "0.8.8"
}

task jacocoTestReport(type: JacocoReport,
        dependsOn: ["testDebugUnitTest", "lintReportDebug",
        ]) {//'createDebugCoverageReport' -- run android test
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.required = true
        html.required = false
        csv.required = false
    }

    def fileFilter = ['android/**/*.*',
                      '**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      '**/*Module.*', // modules for Dagger.
                      '**/*Module$Companion.*', // modules for Dagger+Kotlin.
                      '**/*Dagger*.*', // Dagger auto-generated code.
                      '**/*MembersInjector*.*', // Dagger auto-generated code.
                      '**/*_Provide*Factory*.*',
                      '**/*_Factory.*',] // Dagger auto-generated code
    def debugTree = fileTree(
            dir: "$project.buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter
    )
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: "${project.buildDir}", includes: [
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec"
    ])
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {
    violationRules {
        rule {
            limit {
                minimum = "0.5".toBigDecimal()
            }
        }

        rule {
            element = "CLASS"
            //includes = listOf("org.gradle.*")

            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = "0.3".toBigDecimal()
            }
        }
    }
}

project.tasks["sonar"].dependsOn "jacocoTestCoverageVerification"

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}